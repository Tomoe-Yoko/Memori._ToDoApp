// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
  id             Int            @id @default(autoincrement())
  userName       String
  supabaseUserId String         @unique
  themeColorId   ThemeColorId
  startOfWeek    StartOfWeek    @default(iso8601)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  calendars      Calendar[]
  routineWorks   RoutineWork[]
  todoGroups     TodoGroup[]
  galleryGroups  GalleryGroup[]
  contacts       Contact[]

  @@map("Users")
}

enum StartOfWeek {
  gregory
  iso8601
}

enum ThemeColorId {
  Theme01
  Theme02
  Theme03
  Theme04
  Theme05
  Theme06
  Theme07
  Theme08
  Theme09
  Theme10
  Theme11
  Theme12
  Theme13
  Theme14
  Theme15
}

model Calendar {
  id            Int           @id @default(autoincrement())
  userId        Int
  scheduleDate  DateTime
  content       String
  scheduleColor ScheduleColor
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user Users @relation(fields: [userId], references: [id])

  @@map("Calendar")
}

enum ScheduleColor {
  Pink
  Blue
  Green
  Orange
  Cyan
  Yellow
  Wine
  Purple
}

model TodoGroup {
  id             Int      @id @default(autoincrement())
  userId         Int
  toDoGroupTitle String
  sortTabOrder   Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user      Users       @relation(fields: [userId], references: [id])
  toDoItems TodoItems[]

  @@map("TodoGroup")
}

model TodoItems {
  id          Int      @id @default(autoincrement())
  todoGroupId Int
  toDoItem    String
  isChecked   Boolean
  sortOrder   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  todoGroup TodoGroup @relation(fields: [todoGroupId], references: [id])

  @@map("TodoItems")
}

model RoutineWork {
  id             Int      @id @default(autoincrement())
  userId         Int
  weekly         Weekly
  routineContent String
  isChecked      Boolean
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           Users    @relation(fields: [userId], references: [id])
}

enum Weekly {
  mon
  tue
  wed
  thu
  fri
  sat
  sun
}

model GalleryGroup {
  id                Int      @id @default(autoincrement())
  userId            Int
  galleryGroupTitle String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user         Users          @relation(fields: [userId], references: [id])
  galleryItems GalleryItems[]

  @@map("GalleryGroup")
}

model GalleryItems {
  id                Int      @id @default(autoincrement())
  galleryGroupId    Int
  thumbnailImageKey String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  galleryGroup GalleryGroup @relation(fields: [galleryGroupId], references: [id])

  @@map("GalleryItems")
}

model Contact {
  id        Int      @id @default(autoincrement())
  userId    Int
  userName  String
  email     String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      Users    @relation(fields: [userId], references: [id])

  @@map("Contact")
}
